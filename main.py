
from telethon import TelegramClient, events, Button
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sqlite3
import random
import threading
import time
import http.server
import socketserver
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
API_ID = int(os.getenv('API_ID', '25723882'))
API_HASH = os.getenv('API_HASH', '151124efbbbe8c1b47db84955e4f1ae5')
BOT_TOKEN = os.getenv('BOT_TOKEN', '8481307424:AAEX7XN6DtLxra3vR1Y2Q60NZ6AgvxQJ96k')  # –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("üìù –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    print("üîß –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ –≤ –∫–æ–¥ (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
    exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–π—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_thai_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    thai_tz = pytz.timezone('Asia/Bangkok')
    utc_now = datetime.now(pytz.UTC)
    thai_now = utc_now.astimezone(thai_tz)
    return thai_now

def get_thai_date():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ç–∞–π—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return get_thai_time().date()

client = TelegramClient('babybot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS families (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS family_members (
            family_id INTEGER,
            user_id INTEGER,
            role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS feedings (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            timestamp TEXT NOT NULL,
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS diapers (
            id INTEGER PRIMARY KEY,
            family_id INTEGER,
            author_id INTEGER,
            timestamp TEXT NOT NULL,
            author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
            author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    cur.execute("""
        CREATE TABLE IF NOT EXISTS settings (
            family_id INTEGER,
            feed_interval INTEGER DEFAULT 3,
            diaper_interval INTEGER DEFAULT 2,
            tips_enabled INTEGER DEFAULT 1,
            tips_time_hour INTEGER DEFAULT 9,
            tips_time_minute INTEGER DEFAULT 0,
            FOREIGN KEY (family_id) REFERENCES families (id)
        )
    """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ settings, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN tips_time_hour INTEGER DEFAULT 9")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tips_time_hour")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ tips_time_hour —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    try:
        cur.execute("ALTER TABLE settings ADD COLUMN tips_time_minute INTEGER DEFAULT 0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ tips_time_minute")
    except sqlite3.OperationalError:
        print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ tips_time_minute —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cur.execute("UPDATE settings SET tips_time_hour = 9 WHERE tips_time_hour IS NULL")
    cur.execute("UPDATE settings SET tips_time_minute = 0 WHERE tips_time_minute IS NULL")
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü feedings –∏ diapers
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ family_id –≤ —Ç–∞–±–ª–∏—Ü–µ feedings
        cur.execute("PRAGMA table_info(feedings)")
        columns = [col[1] for col in cur.fetchall()]
        
        if 'family_id' not in columns:
            print("üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É feedings...")
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute("""
                CREATE TABLE feedings_new (
                    id INTEGER PRIMARY KEY,
                    family_id INTEGER,
                    author_id INTEGER,
                    timestamp TEXT NOT NULL,
                    author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
                    author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    FOREIGN KEY (family_id) REFERENCES families (id)
                )
            """)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("SELECT id, user_id, timestamp FROM feedings")
            old_data = cur.fetchall()
            
            for row in old_data:
                # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
                temp_family_id = create_family(f"–ú–∏–≥—Ä–∞—Ü–∏—è {row[0]}", row[1])
                cur.execute("INSERT INTO feedings_new (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)",
                           (temp_family_id, row[1], row[2], '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
            cur.execute("DROP TABLE feedings")
            cur.execute("ALTER TABLE feedings_new RENAME TO feedings")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ feedings –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ feedings —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            
    except sqlite3.OperationalError as e:
        print(f"‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è feedings: {e}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ family_id –≤ —Ç–∞–±–ª–∏—Ü–µ diapers
        cur.execute("PRAGMA table_info(diapers)")
        columns = [col[1] for col in cur.fetchall()]
        
        if 'family_id' not in columns:
            print("üîÑ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É diapers...")
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cur.execute("""
                CREATE TABLE diapers_new (
                    id INTEGER PRIMARY KEY,
                    family_id INTEGER,
                    author_id INTEGER,
                    timestamp TEXT NOT NULL,
                    author_role TEXT DEFAULT '–†–æ–¥–∏—Ç–µ–ª—å',
                    author_name TEXT DEFAULT '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    FOREIGN KEY (family_id) REFERENCES families (id)
                )
            """)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("SELECT id, user_id, timestamp FROM diapers")
            old_data = cur.fetchall()
            
            for row in old_data:
                # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
                temp_family_id = create_family(f"–ú–∏–≥—Ä–∞—Ü–∏—è {row[0]}", row[1])
                cur.execute("INSERT INTO diapers_new (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)",
                           (temp_family_id, row[1], row[2], '–†–æ–¥–∏—Ç–µ–ª—å', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
            cur.execute("DROP TABLE diapers")
            cur.execute("ALTER TABLE diapers_new RENAME TO diapers")
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ diapers –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            print("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ diapers —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            
    except sqlite3.OperationalError as e:
        print(f"‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è diapers: {e}")
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_family_id(user_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT family_id FROM family_members WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    conn.close()
    family_id = result[0] if result else None
    print(f"DEBUG: get_family_id({user_id}) = {family_id}")
    return family_id

def create_family(name, user_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    cur.execute("INSERT INTO families (name) VALUES (?)", (name,))
    family_id = cur.lastrowid
    
    cur.execute("INSERT INTO family_members (family_id, user_id) VALUES (?, ?)", (family_id, user_id))
    cur.execute("INSERT INTO settings (family_id) VALUES (?)", (family_id,))
    
    conn.commit()
    conn.close()
    return family_id

def invite_code_for(family_id):
    # –í —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ invite_code, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–µ–º—å–∏
    return str(family_id)

def get_family_name(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–º—å–∏ –ø–æ ID"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT name FROM families WHERE id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    return result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–º—å—è"

def get_member_info(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–µ —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT role, name FROM family_members WHERE user_id = ?", (user_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1]  # role, name
    return "–†–æ–¥–∏—Ç–µ–ª—å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def set_member_role(user_id, role, name):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –∏ –∏–º—è –¥–ª—è —á–ª–µ–Ω–∞ —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE family_members SET role = ?, name = ? WHERE user_id = ?", (role, name, user_id))
    conn.commit()
    conn.close()

def get_family_members_with_roles(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ —Å —Ä–æ–ª—è–º–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, role, name FROM family_members WHERE family_id = ?", (family_id,))
    members = cur.fetchall()
    conn.close()
    return members

def add_feeding(user_id, minutes_ago=0):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    role, name = get_member_info(user_id)
    
    timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
    cur.execute("INSERT INTO feedings (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)", 
                (family_id, user_id, timestamp.isoformat(), role, name))
    conn.commit()
    conn.close()

def add_diaper_change(user_id, minutes_ago=0):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–µ–º—å—é
        family_id = create_family("–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ–º—å—è", user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    role, name = get_member_info(user_id)
    
    timestamp = get_thai_time() - timedelta(minutes=minutes_ago)
    cur.execute("INSERT INTO diapers (family_id, author_id, timestamp, author_role, author_name) VALUES (?, ?, ?, ?, ?)", 
                (family_id, user_id, timestamp.isoformat(), role, name))
    conn.commit()
    conn.close()

def get_last_feeding_time(user_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        return None
    
    cur.execute("SELECT timestamp FROM feedings WHERE family_id = ? ORDER BY timestamp DESC LIMIT 1", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return datetime.fromisoformat(result[0])
    return None

def get_user_intervals(family_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT feed_interval, diaper_interval FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1]
    return 3, 2

def set_user_interval(family_id, feed_interval=None, diaper_interval=None):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    if feed_interval is not None:
        cur.execute("UPDATE settings SET feed_interval = ? WHERE family_id = ?", (feed_interval, family_id))
    if diaper_interval is not None:
        cur.execute("UPDATE settings SET diaper_interval = ? WHERE family_id = ?", (diaper_interval, family_id))
    conn.commit()
    conn.close()

def is_tips_enabled(family_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT tips_enabled FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    return result[0] if result else 1

def toggle_tips(family_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE settings SET tips_enabled = CASE WHEN tips_enabled = 1 THEN 0 ELSE 1 END WHERE family_id = ?", (family_id,))
    conn.commit()
    conn.close()

def set_tips_time(family_id, hour, minute):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("UPDATE settings SET tips_time_hour = ?, tips_time_minute = ? WHERE family_id = ?", (hour, minute, family_id))
    conn.commit()
    conn.close()

def get_tips_time(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT tips_time_hour, tips_time_minute FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    conn.close()
    if result:
        return result[0], result[1]
    return 9, 0  # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_feedings_by_day(user_id, date):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        return []
    
    start_date = datetime.combine(date, datetime.min.time()).isoformat()
    end_date = datetime.combine(date, datetime.max.time()).isoformat()
    cur.execute("SELECT id, timestamp, author_role, author_name FROM feedings WHERE family_id = ? AND timestamp BETWEEN ? AND ? ORDER BY timestamp", 
                (family_id, start_date, end_date))
    result = cur.fetchall()
    conn.close()
    return result

def get_diapers_by_day(user_id, date):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º family_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    family_id = get_family_id(user_id)
    if not family_id:
        return []
    
    start_date = datetime.combine(date, datetime.min.time()).isoformat()
    end_date = datetime.combine(date, datetime.max.time()).isoformat()
    cur.execute("SELECT id, timestamp, author_role, author_name FROM diapers WHERE family_id = ? AND timestamp BETWEEN ? AND ? ORDER BY timestamp", 
                (family_id, start_date, end_date))
    result = cur.fetchall()
    conn.close()
    return result

def delete_entry(table, entry_id):
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute(f"DELETE FROM {table} WHERE id = ?", (entry_id,))
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞
def get_random_tip():
    try:
        import csv
        tips = []
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–≤–µ—Ç—ã –∏–∑ CSV —Ñ–∞–π–ª–∞
        with open("data/advice.csv", "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                tips.append(row["tip"])
        
        if tips:
            return random.choice(tips)
        else:
            return "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤."
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–≤–µ—Ç–æ–≤: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π —Å–æ–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä–µ–±–µ–Ω–æ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –≤ —Å–≤–æ–µ–º —Ç–µ–º–ø–µ."



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
scheduler = AsyncIOScheduler()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
family_creation_pending = {}
manual_feeding_pending = {}
join_pending = {}
edit_pending = {}
edit_role_pending = {}

@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    buttons = [
        [Button.text("üçΩ –ö–æ—Ä–º–ª–µ–Ω–∏–µ"), Button.text("üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞")],
        [Button.text("üçº –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è"), Button.text("üìú –ò—Å—Ç–æ—Ä–∏—è")],
        [Button.text("üí° –°–æ–≤–µ—Ç"), Button.text("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    await event.respond("üë∂ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–∞–ª—ã—à–æ–º:", buttons=buttons)

@client.on(events.NewMessage(pattern='üçΩ –ö–æ—Ä–º–ª–µ–Ω–∏–µ'))
async def feeding_menu(event):
    buttons = [
        [Button.inline("–°–µ–π—á–∞—Å", b"feed_now")],
        [Button.inline("15 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_15")],
        [Button.inline("30 –º–∏–Ω –Ω–∞–∑–∞–¥", b"feed_30")],
        [Button.inline("üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", b"feed_manual")],
    ]
    await event.respond("üçº –ö–æ–≥–¥–∞ –±—ã–ª–æ –∫–æ—Ä–º–ª–µ–Ω–∏–µ?", buttons=buttons)

@client.on(events.NewMessage(pattern='üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞'))
async def diaper_menu(event):
    buttons = [
        [Button.inline("–°–µ–π—á–∞—Å", b"diaper_now")],
        [Button.inline("üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é", b"diaper_manual")],
    ]
    await event.respond("üß∑ –ö–æ–≥–¥–∞ –±—ã–ª–∞ —Å–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞?", buttons=buttons)

@client.on(events.NewMessage(pattern='‚è∞ –ö–æ–≥–¥–∞ –µ–ª?'))
async def last_feed(event):
    time = get_last_feeding_time(event.sender_id)
    if time:
        delta = datetime.now() - time
        h, m = divmod(int(delta.total_seconds() // 60), 60)
        await event.respond(f"üçº –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –±—ã–ª–æ {h}—á {m}–º –Ω–∞–∑–∞–¥.")
    else:
        await event.respond("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏.")

@client.on(events.NewMessage(pattern='üí° –°–æ–≤–µ—Ç'))
async def tip_command(event):
    tip = get_random_tip()
    await event.respond(tip)

@client.on(events.NewMessage(pattern='üë§ –ú–æ—è —Ä–æ–ª—å'))
async def my_role_command(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    role, name = get_member_info(uid)
    
    message = (
        f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å –≤ —Å–µ–º—å–µ:**\n\n"
        f"üé≠ –†–æ–ª—å: {role}\n"
        f"üìù –ò–º—è: {name}\n\n"
        f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å"
    )
    
    buttons = [
        [Button.inline("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", b"edit_role")],
        [Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_main")]
    ]
    
    await event.respond(message, buttons=buttons)



@client.on(events.NewMessage(pattern='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
async def settings_menu(event):
    fid = get_family_id(event.sender_id)
    if not fid:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ–º—å–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
        buttons = [
            [Button.inline("üë®‚Äçüë©‚Äçüëß –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", b"create_family")]
        ]
        await event.respond("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é:", buttons=buttons)
        return
    
    feed_i, diaper_i = get_user_intervals(fid)
    tips_on = is_tips_enabled(fid)
    tips_label = "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã" if tips_on else "üîî –í–∫–ª—é—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã"
    tips_hour, tips_minute = get_tips_time(fid)
    
    buttons = [
        [Button.inline(f"üçΩ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: {feed_i}—á", b"set_feed")],
        [Button.inline(f"üß∑ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: {diaper_i}—á", b"set_diaper")],
        [Button.inline(tips_label, b"toggle_tips")],
        [Button.inline(f"üïê –í—Ä–µ–º—è —Å–æ–≤–µ—Ç–æ–≤: {tips_hour:02d}:{tips_minute:02d}", b"set_tips_time")],
        [Button.inline("üë§ –ú–æ—è —Ä–æ–ª—å", b"my_role")],
        [Button.inline("üë®‚Äçüë©‚Äçüëß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π", b"family_management")]
    ]
    await event.respond("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", buttons=buttons)

async def create_family_cmd(event):
    await event.respond("üë®‚Äçüë©‚Äçüëß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏:")
    family_creation_pending[event.sender_id] = True

async def family_management_cmd(event):
    fid = get_family_id(event.sender_id)
    if fid:
        code = invite_code_for(fid)
        buttons = [
            [Button.inline("üë• –ß–ª–µ–Ω—ã —Å–µ–º—å–∏", b"family_members")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        await event.respond(
            f"üë®‚Äçüë©‚Äçüëß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º—å–µ–π**\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {get_family_name(fid)}\n"
            f"–ö–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{code}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            buttons=buttons
        )
    else:
        await event.respond("‚ùå –û—à–∏–±–∫–∞: —Å–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

async def family_members_cmd(event):
    fid = get_family_id(event.sender_id)
    if fid:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (fid,))
        members = cur.fetchall()
        conn.close()
        
        if members:
            text = "üë• **–ß–ª–µ–Ω—ã —Å–µ–º—å–∏:**\n\n"
            for i, (user_id, role, name) in enumerate(members, 1):
                text += f"{i}. {role} {name} (ID: {user_id})\n"
        else:
            text = "üë• –í —Å–µ–º—å–µ –ø–æ–∫–∞ –Ω–µ—Ç —á–ª–µ–Ω–æ–≤."
        
        buttons = [
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–µ–º—å–µ–π", b"back_to_family_management")]
        ]
        await event.respond(text, buttons=buttons)
    else:
        await event.respond("‚ùå –û—à–∏–±–∫–∞: —Å–µ–º—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



@client.on(events.NewMessage(pattern='üìú –ò—Å—Ç–æ—Ä–∏—è'))
async def history_menu(event):
    print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã 'üìú –ò—Å—Ç–æ—Ä–∏—è' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}")
    today = get_thai_date()
    buttons = [
        [Button.inline(f"üìÖ {today - timedelta(days=i)}", f"hist_{i}".encode())] for i in range(3)
    ]
    await event.respond("üìñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", buttons=buttons)

@client.on(events.NewMessage(pattern='üçº –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è'))
async def feeding_status(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è"""
    uid = event.sender_id
    fid = get_family_id(uid)
    
    if not fid:
        await event.respond("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ–º—å—é.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (fid,))
    interval_result = cur.fetchone()
    feed_interval = interval_result[0] if interval_result else 3
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    last_feeding = get_last_feeding_time_for_family(fid)
    
    if last_feeding:
        time_since_last = get_thai_time() - last_feeding
        hours_since_last = time_since_last.total_seconds() / 3600
        minutes_since_last = time_since_last.total_seconds() / 60
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        if hours_since_last < feed_interval:
            status = "‚úÖ –í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –ø–æ–¥–æ—à–ª–æ"
            remaining = feed_interval - hours_since_last
            status_emoji = "üü¢"
        elif hours_since_last < (feed_interval + 0.5):
            status = "‚ö†Ô∏è –ü–æ—Ä–∞ –∫–æ—Ä–º–∏—Ç—å!"
            remaining = 0
            status_emoji = "üü°"
        else:
            status = "üö® –î–æ–ª–≥–æ –Ω–µ –∫–æ—Ä–º–∏–ª–∏!"
            remaining = 0
            status_emoji = "üî¥"
        
        message = (
            f"{status_emoji} **–°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
            f"üïê –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. ({minutes_since_last:.0f} –º–∏–Ω.)\n"
            f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
        )
        
        if remaining > 0:
            message += f"‚è≥ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è: {remaining:.1f} —á."
        else:
            message += f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–∫–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å!"
    else:
        message = (
            f"üçº **–°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è**\n\n"
            f"üë∂ –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n"
            f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n"
            f"üí° –ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!"
        )
    
    conn.close()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    buttons = [
        [Button.inline("üçº –ö–æ—Ä–º–∏—Ç—å —Å–µ–π—á–∞—Å", b"feed_now")],
        [Button.inline("üïí –£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è", b"feed_manual")]
    ]
    
    await event.respond(message, buttons=buttons)

@client.on(events.CallbackQuery)
async def callback_handler(event):
    data = event.data.decode()

    if data == "feed_now":
        add_feeding(event.sender_id)
        await event.edit("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "feed_15":
        add_feeding(event.sender_id, 15)
        await event.edit("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ (15 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "feed_30":
        add_feeding(event.sender_id, 30)
        await event.edit("üçº –ö–æ—Ä–º–ª–µ–Ω–∏–µ (30 –º–∏–Ω –Ω–∞–∑–∞–¥) –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
    elif data == "feed_manual":
        manual_feeding_pending[event.sender_id] = True
        await event.respond("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

    elif data == "diaper_now":
        add_diaper_change(event.sender_id)
        await event.edit("üß∑ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
    elif data == "diaper_manual":
        manual_feeding_pending[event.sender_id] = "diaper"
        await event.respond("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

    elif data == "set_feed":
        buttons = [[Button.inline(f"{i} —á", f"feed_{i}".encode())] for i in range(1, 7)]
        await event.edit("üçΩ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è:", buttons=buttons)
    elif data == "set_diaper":
        buttons = [[Button.inline(f"{i} —á", f"diaper_{i}".encode())] for i in range(1, 7)]
        await event.edit("üß∑ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞:", buttons=buttons)
    elif data.startswith("feed_yesterday_"):
        minutes_ago = int(data.split("_")[-1])
        uid = event.sender_id
        
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ feed_yesterday_ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        print(f"DEBUG: manual_feeding_pending[{uid}] = {manual_feeding_pending.get(uid, '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        
        if uid in manual_feeding_pending and isinstance(manual_feeding_pending[uid], dict):
            time_str = manual_feeding_pending[uid]["time"]
            add_feeding(uid, minutes_ago=minutes_ago)
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m')
            await event.edit(f"‚úÖ –ö–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday}) –≤ {time_str} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            del manual_feeding_pending[uid]
        else:
            await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    elif data.startswith("diaper_yesterday_"):
        minutes_ago = int(data.split("_")[-1])
        uid = event.sender_id
        
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ diaper_yesterday_ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        print(f"DEBUG: manual_feeding_pending[{uid}] = {manual_feeding_pending.get(uid, '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ')}")
        
        if uid in manual_feeding_pending and isinstance(manual_feeding_pending[uid], dict):
            time_str = manual_feeding_pending[uid]["time"]
            add_diaper_change(uid, minutes_ago=minutes_ago)
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m')
            await event.edit(f"‚úÖ –°–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞ ({yesterday}) –≤ {time_str} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.")
            del manual_feeding_pending[uid]
        else:
            await event.edit("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    elif data.startswith("feed_"):
        hours = int(data.split("_")[1])
        fid = get_family_id(event.sender_id)
        set_user_interval(fid, feed_interval=hours)
        await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {hours} —á.")
    elif data.startswith("diaper_"):
        hours = int(data.split("_")[1])
        fid = get_family_id(event.sender_id)
        set_user_interval(fid, diaper_interval=hours)
        await event.edit(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {hours} —á.")
    elif data == "toggle_tips":
        fid = get_family_id(event.sender_id)
        toggle_tips(fid)
        await settings_menu(event)
    
    elif data == "my_role":
        uid = event.sender_id
        role, name = get_member_info(uid)
        
        message = (
            f"üë§ **–í–∞—à–∞ —Ä–æ–ª—å –≤ —Å–µ–º—å–µ:**\n\n"
            f"üé≠ –†–æ–ª—å: {role}\n"
            f"üìù –ò–º—è: {name}\n\n"
            f"üí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å"
        )
        
        buttons = [
            [Button.inline("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", b"edit_role")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        
        await event.edit(message, buttons=buttons)
    
    elif data == "edit_role":
        await event.edit("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:")
        buttons = [
            [Button.inline("üë®‚Äçüë©‚Äçüëß –†–æ–¥–∏—Ç–µ–ª—å", b"role_parent")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ú–∞–º–∞", b"role_mom")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ü–∞–ø–∞", b"role_dad")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ë–∞–±—É—à–∫–∞", b"role_grandma")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –î–µ–¥—É—à–∫–∞", b"role_grandpa")],
            [Button.inline("üë®‚Äçüë©‚Äçüëß –ù—è–Ω—è", b"role_nanny")],
            [Button.inline("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", b"back_to_settings")]
        ]
        await event.edit("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", buttons=buttons )
    
    elif data.startswith("role_"):
        role_map = {
            "role_parent": "–†–æ–¥–∏—Ç–µ–ª—å",
            "role_mom": "–ú–∞–º–∞",
            "role_dad": "–ü–∞–ø–∞",
            "role_grandma": "–ë–∞–±—É—à–∫–∞",
            "role_grandpa": "–î–µ–¥—É—à–∫–∞",
            "role_nanny": "–ù—è–Ω—è"
        }
        role = role_map.get(data, "–†–æ–¥–∏—Ç–µ–ª—å")
        uid = event.sender_id
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await event.edit(f"üë§ –†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role}\n\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        edit_role_pending[uid] = {"role": role, "step": "waiting_name"}
    
    elif data == "back_to_main":
        await start(event)
    
    elif data == "set_tips_time":
        await event.edit("üïê –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞
        buttons = []
        for hour in range(0, 24, 2):  # –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
            buttons.append([Button.inline(f"{hour:02d}:00", f"tips_hour_{hour}".encode())])
        buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"back_to_settings")])
        await event.edit("üïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤:", buttons=buttons)

    elif data.startswith("tips_hour_"):
        hour = int(data.split("_")[-1])
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç—ã
        buttons = []
        for minute in range(0, 60, 15):  # –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
            buttons.append([Button.inline(f"{hour:02d}:{minute:02d}", f"tips_time_{hour}_{minute}".encode())])
        buttons.append([Button.inline("üîô –ù–∞–∑–∞–¥", b"set_tips_time")])
        await event.edit(f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {hour:02d}:XX:", buttons=buttons)
    
    elif data.startswith("tips_time_"):
        parts = data.split("_")
        hour = int(parts[-2])
        minute = int(parts[-1])
        fid = get_family_id(event.sender_id)
        set_tips_time(fid, hour, minute)
        await event.edit(f"‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(2)
        await settings_menu(event)
    
    elif data.startswith("hist_"):
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.sender_id}, data: {data}")
        try:
            index = int(data.split("_")[1])
            target_date = get_thai_date() - timedelta(days=index)
            print(f"DEBUG: –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞: {target_date}")
            
            feedings = get_feedings_by_day(event.sender_id, target_date)
            diapers = get_diapers_by_day(event.sender_id, target_date)
            
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: {len(feedings) if feedings else 0}")
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω –ø–æ–¥–≥—É–∑–Ω–∏–∫–æ–≤: {len(diapers) if diapers else 0}")
            
            if feedings:
                print(f"DEBUG: –ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {feedings[0]}")
            if diapers:
                print(f"DEBUG: –ü–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞: {diapers[0]}")
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await event.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", alert=True)
            return

        text = f"üìÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ {target_date}:\n\n"

        if feedings:
            text += "üçº –ö–æ—Ä–º–ª–µ–Ω–∏—è:\n"
            for f in feedings:
                time_str = datetime.fromisoformat(f[1]).strftime("%H:%M")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
                if len(f) >= 4 and f[3] and f[4]:  # author_role –∏ author_name
                    author_info = f"{f[3]} {f[4]}"
                else:
                    author_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                text += f"  ‚Ä¢ {time_str} - {author_info} [ID {f[0]}]\n"
        else:
            text += "üçº –ö–æ—Ä–º–ª–µ–Ω–∏–π –Ω–µ—Ç\n"

        if diapers:
            text += "\nüß∑ –ü–æ–¥–≥—É–∑–Ω–∏–∫–∏:\n"
            for d in diapers:
                time_str = datetime.fromisoformat(d[1]).strftime("%H:%M")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
                if len(d) >= 4 and d[3] and d[4]:  # author_role –∏ author_name
                    author_info = f"{d[3]} {d[4]}"
                else:
                    author_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                text += f"  ‚Ä¢ {time_str} - {author_info} [ID {d[0]}]\n"
        else:
            text += "\nüß∑ –°–º–µ–Ω –Ω–µ—Ç\n"

        # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        buttons = []
        for f in feedings:
            buttons.append([Button.inline(f"üçº {f[0]} ‚úèÔ∏è", f"edit_feed_{f[0]}".encode()),
                            Button.inline("üóë", f"del_feed_{f[0]}".encode())])
        for d in diapers:
            buttons.append([Button.inline(f"üß∑ {d[0]} ‚úèÔ∏è", f"edit_diaper_{d[0]}".encode()),
                            Button.inline("üóë", f"del_diaper_{d[0]}".encode())])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏
        if buttons:
            await event.edit(text, buttons=buttons)
        else:
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await event.edit(text)
        return

    elif data.startswith("del_feed_"):
        entry_id = int(data.split("_")[-1])
        delete_entry("feedings", entry_id)
        await event.answer("üóë –£–¥–∞–ª–µ–Ω–æ", alert=True)

    elif data.startswith("del_diaper_"):
        entry_id = int(data.split("_")[-1])
        delete_entry("diapers", entry_id)
        await event.answer("üóë –£–¥–∞–ª–µ–Ω–æ", alert=True)

    elif data.startswith("edit_feed_") or data.startswith("edit_diaper_"):
        entry_id = int(data.split("_")[-1])
        table = "feedings" if "feed" in data else "diapers"
        edit_pending[event.sender_id] = (table, entry_id)
        await event.respond(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –¥–ª—è –∑–∞–ø–∏—Å–∏ ID {entry_id}")
    
    elif data == "create_family":
        await event.respond("üë®‚Äçüë©‚Äçüëß –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ–º—å–∏:")
        family_creation_pending[event.sender_id] = True
    
    elif data == "family_management":
        await family_management_cmd(event)
    
    elif data == "family_members":
        await family_members_cmd(event)
    
    elif data == "back_to_family_management":
        await family_management_cmd(event)
    
    elif data == "back_to_settings":
        await settings_menu(event)
    
    elif data == "feed_cancel":
        uid = event.sender_id
        if uid in manual_feeding_pending:
            del manual_feeding_pending[uid]
        await event.edit("‚ùå –ó–∞–ø–∏—Å—å –∫–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    elif data == "diaper_cancel":
        uid = event.sender_id
        if uid in manual_feeding_pending:
            del manual_feeding_pending[uid]
        await event.edit("‚ùå –ó–∞–ø–∏—Å—å —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@client.on(events.NewMessage)
async def handle_text(event):
    uid = event.sender_id

    if uid in manual_feeding_pending:
        user_input = event.raw_text.strip()
        action_type = manual_feeding_pending[uid]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ
        if action_type == "diaper":
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤–≤–µ–ª –≤—Ä–µ–º—è –¥–ª—è —Å–º–µ–Ω—ã –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞: '{user_input}'")
            action_name = "—Å–º–µ–Ω–∞ –ø–æ–¥–≥—É–∑–Ω–∏–∫–∞"
            add_func = add_diaper_change
            callback_prefix = "diaper_yesterday_"
            cancel_callback = "diaper_cancel"
        else:
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤–≤–µ–ª –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä–º–ª–µ–Ω–∏—è: '{user_input}'")
            action_name = "–∫–æ—Ä–º–ª–µ–Ω–∏–µ"
            add_func = add_feeding
            callback_prefix = "feed_yesterday_"
            cancel_callback = "feed_cancel"
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            t = datetime.strptime(user_input, "%H:%M")
            print(f"DEBUG: –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–µ–Ω: {t}")
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (–≤ —Ç–∞–π—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
            today = get_thai_date()
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç —Å —Ç–∞–π—Å–∫–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
            thai_tz = pytz.timezone('Asia/Bangkok')
            dt = thai_tz.localize(datetime.combine(today, t.time()))
            now = get_thai_time()
            
            print(f"DEBUG: –°–µ–≥–æ–¥–Ω—è (–¢–∞–∏–ª–∞–Ω–¥): {today}")
            print(f"DEBUG: –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {dt}")
            print(f"DEBUG: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–¢–∞–∏–ª–∞–Ω–¥): {now}")
            print(f"DEBUG: UTC –≤—Ä–µ–º—è: {datetime.now(pytz.UTC)}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
            diff = int((now - dt).total_seconds() // 60)
            print(f"DEBUG: –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö: {diff}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –±—É–¥—É—â–µ–º –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º
            if diff < 0:
                print(f"DEBUG: –í—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º, —Ä–∞–∑–Ω–∏—Ü–∞: {diff}")
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞ –ø—Ä–æ—à–ª—ã–π –¥–µ–Ω—å
                yesterday = today - timedelta(days=1)
                yesterday_dt = thai_tz.localize(datetime.combine(yesterday, t.time()))
                yesterday_diff = int((now - yesterday_dt).total_seconds() // 60)
                
                if yesterday_diff >= 0 and yesterday_diff <= 1440:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
                    buttons = [
                        [Button.inline("‚úÖ –î–∞, –∑–∞ –≤—á–µ—Ä–∞", f"{callback_prefix}{yesterday_diff}".encode())],
                        [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", cancel_callback.encode())]
                    ]
                    await event.respond(
                        f"üïí –í—Ä–µ–º—è {user_input} –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                        f"–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å {action_name} –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})?",
                        buttons=buttons)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    manual_feeding_pending[uid] = {"type": action_type, "time": user_input, "minutes_ago": yesterday_diff}
                    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ manual_feeding_pending[{uid}] = {manual_feeding_pending[uid]}")
                    return
                else:
                    await event.respond("‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.")
                    return
            elif diff > 1440:  # –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                print(f"DEBUG: –í—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º, —Ä–∞–∑–Ω–∏—Ü–∞: {diff}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –≤—Ä–µ–º—è –∑–∞ –≤—á–µ—Ä–∞
                yesterday = today - timedelta(days=1)
                yesterday_dt = thai_tz.localize(datetime.combine(yesterday, t.time()))
                yesterday_diff = int((now - yesterday_dt).total_seconds() // 60)
                
                if yesterday_diff >= 0 and yesterday_diff <= 1440:
                    print(f"DEBUG: –í—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è, —Ä–∞–∑–Ω–∏—Ü–∞: {yesterday_diff}")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞ –≤—á–µ—Ä–∞
                    buttons = [
                        [Button.inline("‚úÖ –î–∞, –∑–∞ –≤—á–µ—Ä–∞", f"{callback_prefix}{yesterday_diff}".encode())],
                        [Button.inline("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", cancel_callback.encode())]
                    ]
                    await event.respond(
                        f"üïí –í—Ä–µ–º—è {user_input} —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.\n"
                        f"–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å {action_name} –∑–∞ –≤—á–µ—Ä–∞ ({yesterday.strftime('%d.%m')})?",
                        buttons=buttons)
                    manual_feeding_pending[uid] = {"type": action_type, "time": user_input, "minutes_ago": yesterday_diff}
                    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ manual_feeding_pending[{uid}] = {manual_feeding_pending[uid]}")
                    return
                else:
                    await event.respond("‚ùå –í—Ä–µ–º—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –ø—Ä–æ—à–ª–æ–º. –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥.")
                    return
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            if diff >= 0:
                print(f"DEBUG: –î–æ–±–∞–≤–ª—è–µ–º {action_name}, minutes_ago: {diff}")
                add_func(uid, minutes_ago=diff)
                await event.respond(f"‚úÖ {action_name.capitalize()} –≤ {user_input} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ.")
            else:
                await event.respond("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if uid in manual_feeding_pending:
                del manual_feeding_pending[uid]
        except ValueError as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            if uid in manual_feeding_pending:
                del manual_feeding_pending[uid]
        except Exception as e:
            print(f"DEBUG: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await event.respond(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
            if uid in manual_feeding_pending:
                del manual_feeding_pending[uid]
        return

    if uid in family_creation_pending:
        name = event.raw_text.strip()
        fid = create_family(name, uid)
        del family_creation_pending[uid]
        code = invite_code_for(fid)
        await event.respond(f"‚úÖ –°–µ–º—å—è —Å–æ–∑–¥–∞–Ω–∞. –ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: `{code}`")
        return
    
    if uid in edit_role_pending:
        user_input = event.raw_text.strip()
        role_data = edit_role_pending[uid]
        
        if role_data["step"] == "waiting_name":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∏ –∏–º—è
            set_member_role(uid, role_data["role"], user_input)
            del edit_role_pending[uid]
            
            await event.respond(
                f"‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üé≠ –†–æ–ª—å: {role_data['role']}\n"
                f"üìù –ò–º—è: {user_input}\n\n"
                f"üí° –¢–µ–ø–µ—Ä—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è, –∫—Ç–æ –∏–º–µ–Ω–Ω–æ —É—Ö–∞–∂–∏–≤–∞–µ—Ç –∑–∞ –º–∞–ª—ã—à–æ–º!"
            )
        return



def get_last_feeding_time_for_family(family_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
    members = cur.fetchall()
    
    if not members:
        conn.close()
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
    member_ids = [str(member[0]) for member in members]
    placeholders = ','.join(['?' for _ in member_ids])
    
    cur.execute(f"""
        SELECT timestamp FROM feedings 
        WHERE family_id = ? 
        ORDER BY timestamp DESC 
        LIMIT 1
    """, (family_id,))
    
    result = cur.fetchone()
    conn.close()
    
    if result:
        return datetime.fromisoformat(result[0])
    return None

def should_send_feeding_reminder(family_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    conn = sqlite3.connect("babybot.db")
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–º—å–∏
    cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
    result = cur.fetchone()
    
    if not result:
        conn.close()
        return False
    
    feed_interval = result[0]  # –≤ —á–∞—Å–∞—Ö
    last_feeding = get_last_feeding_time_for_family(family_id)
    
    if not last_feeding:
        # –ï—Å–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏
        return True
    
    # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
    time_since_last = datetime.now() - last_feeding
    hours_since_last = time_since_last.total_seconds() / 3600
    
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ + 30 –º–∏–Ω—É—Ç (–±—É—Ñ–µ—Ä), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    return hours_since_last >= (feed_interval + 0.5)
    
    conn.close()

@scheduler.scheduled_job('interval', minutes=30)
async def check_feeding_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        cur.execute("SELECT family_id FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id,) in families:
            if should_send_feeding_reminder(family_id):
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                members = cur.fetchall()
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
                cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
                interval_result = cur.fetchone()
                feed_interval = interval_result[0] if interval_result else 3
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
                last_feeding = get_last_feeding_time_for_family(family_id)
                
                if last_feeding:
                    time_since_last = datetime.now() - last_feeding
                    hours_since_last = time_since_last.total_seconds() / 3600
                    message = (
                        f"üçº **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏!**\n\n"
                        f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
                        f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                        f"üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∫–æ—Ä–º–∏—Ç—å –º–∞–ª—ã—à–∞!"
                    )
                else:
                    message = (
                        f"üçº **–ü–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!**\n\n"
                        f"üë∂ –ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                        f"üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                        f"üí° –ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ!"
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                for (user_id,) in members:
                    try:
                        await client.send_message(user_id, message)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_feeding_reminders: {e}")

@scheduler.scheduled_job('interval', minutes=1)
async def send_scheduled_tips():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–º—å–∏"""
    try:
        current_time = datetime.now()
        current_hour = current_time.hour
        current_minute = current_time.minute
        
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏
        cur.execute("SELECT family_id, tips_time_hour, tips_time_minute FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id, tips_hour, tips_minute) in families:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–≤–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–µ–º—å–∏
            if current_hour == tips_hour and current_minute == tips_minute:
                tip = get_random_tip()
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                members = cur.fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                for (user_id,) in members:
                    try:
                        await client.send_message(user_id, tip)
                        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {current_hour:02d}:{current_minute:02d}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_scheduled_tips: {e}")

@scheduler.scheduled_job('interval', minutes=15)
async def send_scheduled_feeding_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        conn = sqlite3.connect("babybot.db")
        cur = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–º—å–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        cur.execute("SELECT family_id FROM settings WHERE tips_enabled = 1")
        families = cur.fetchall()
        
        for (family_id,) in families:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è
            cur.execute("SELECT feed_interval FROM settings WHERE family_id = ?", (family_id,))
            interval_result = cur.fetchone()
            feed_interval = interval_result[0] if interval_result else 3
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è
            last_feeding = get_last_feeding_time_for_family(family_id)
            
            if last_feeding:
                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ
                time_since_last = datetime.now() - last_feeding
                hours_since_last = time_since_last.total_seconds() / 3600
                
                # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –ø—Ä–∏–º–µ—Ä–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                if abs(hours_since_last - feed_interval) <= 0.25:  # ¬±15 –º–∏–Ω—É—Ç
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏
                    cur.execute("SELECT user_id FROM family_members WHERE family_id = ?", (family_id,))
                    members = cur.fetchall()
                    
                    message = (
                        f"üçº **–í—Ä–µ–º—è –∫–æ—Ä–º–ª–µ–Ω–∏—è!**\n\n"
                        f"‚è∞ –ü—Ä–æ—à–ª–æ: {hours_since_last:.1f} —á. —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏—è\n"
                        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: {last_feeding.strftime('%H:%M')}\n"
                        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {feed_interval} —á.\n\n"
                        f"üí° –ü–æ—Ä–∞ –ø–æ–∫–æ—Ä–º–∏—Ç—å –º–∞–ª—ã—à–∞!"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏
                    for (user_id,) in members:
                        try:
                            await client.send_message(user_id, message)
                            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        conn.close()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_scheduled_feeding_reminders: {e}")

class HealthCheckHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            response = f"""
            <html>
            <head><title>BabyCareBot Health Check</title></head>
            <body>
                <h1>üçº BabyCareBot</h1>
                <p>Status: ‚úÖ Running</p>
                <p>Time: {time.strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>Bot is working in background</p>
            </body>
            </html>
            """
            self.wfile.write(response.encode())
        elif self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            response = '{"status": "healthy", "service": "babycare-bot"}'
            self.wfile.write(response.encode())
        else:
            self.send_response(404)
            self.end_headers()

def start_health_server(port=8000):
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health checks"""
    try:
        with socketserver.TCPServer(("", port), HealthCheckHandler) as httpd:
            print(f"üåê Health check server started on port {port}")
            httpd.serve_forever()
    except Exception as e:
        print(f"‚ùå Health check server error: {e}")

async def start_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º health —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    health_thread = threading.Thread(target=start_health_server, daemon=True)
    health_thread.start()
    print("üåê Health check server started")
    
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(start_bot())
